plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.0.26'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    withSourcesJar()
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

repositories {
    mavenLocal()
    maven { url = 'https://maven.minecraftforge.net' }
    maven { url = 'https://maven.createmod.net' }
    maven { url = 'https://maven.tterrag.com' }
    maven { url = 'https://maven.blamejared.com' }
    maven { url = 'https://www.cursemaven.com' }
    maven { url = 'https://api.modrinth.com/maven' }
    maven { url = 'https://modmaven.dev' }
    maven { url = 'https://maven.architectury.dev' }
    maven { url = 'https://maven.ftb.dev/releases' }
}

minecraft {
    mappings channel: 'parchment', version: "${parchment_mappings_version}-${parchment_minecraft_version}"
    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--nogui'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources').absolutePath, '--existing', file('src/main/resources').absolutePath
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:all")
    implementation fg.deobf("dev.engine-room.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    implementation fg.deobf("net.createmod.ponder:Ponder-Forge-${ponder_minecraft_version}:${ponder_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
}

processResources {
    inputs.property 'version', mod_version
    inputs.property 'mcversion', minecraft_version
    filesMatching('META-INF/mods.toml') {
        expand([
            mod_id: mod_id,
            mod_name: mod_name,
            mod_license: mod_license,
            mod_version: mod_version,
            mod_authors: mod_authors,
            mod_description: mod_description,
            minecraft_version_range: minecraft_version_range,
            forge_version: forge_version,
            loader_version_range: loader_version_range,
            create_version_range: create_version_range
        ])
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url = "file://${project.projectDir}/repo"
        }
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
